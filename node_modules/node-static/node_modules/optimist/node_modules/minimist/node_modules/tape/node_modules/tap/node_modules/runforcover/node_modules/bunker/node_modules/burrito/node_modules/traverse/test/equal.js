var assert = require('assert');
var traverse = require('../');
var deepEqual = require('./lib/deep_equal');

exports.deepDates = function () {
    assert.ok(
        deepEqual(
            { d : new Date, x : [ 1, 2, 3 ] },
            { d : new Date, x : [ 1, 2, 3 ] }
        ),
        'dates should be equal'
    );
    
    var d0 = new Date;
    setTimeout(function () {
        assert.ok(
            !deepEqual(
                { d : d0, x : [ 1, 2, 3 ], },
                { d : new Date, x : [ 1, 2, 3 ] }
            ),
            'microseconds should count in date equality'
        );
    }, 5);
};

exports.deepCircular = function () {
    var a = [1];
    a.push(a); // a = [ 1, *a ]
    
    var b = [1];
    b.push(a); // b = [ 1, [ 1, *a ] ]
    
    assert.ok(
        !deepEqual(a, b),
        'circular ref mount points count towards equality'
    );
    
    var c = [1];
    c.push(c); // c = [ 1, *c ]
    assert.ok(
        deepEqual(a, c),
        'circular refs are structurally the same here'
    );
    
    var d = [1];
    d.push(a); // c = [ 1, [ 1, *d ] ]
    assert.ok(
        deepEqual(b, d),
        'non-root circular ref structural comparison'
    );
};

exports.deepInstances = function () {
    assert.ok(
        !deepEqual([ new Boolean(false) ], [ false ]),
        'boolean instances are not real booleans'
    );
    
    assert.ok(
        !deepEqual([ new String('x') ], [ 'x' ]),
        'string instances are not real strings'
    );
    
    assert.ok(
        !deepEqual([ new Number(4) ], [ 4 ]),
        'number instances are not real numbers'
    );
    
    assert.ok(
        deepEqual([ new RegExp('x') ], [ /x/ ]),
        'regexp instances are real regexps'
    );
    
    assert.ok(
        !deepEqual([ new RegExp(/./) ], [ /../ ]),
        'these regexps aren\'t the same'
    );
    
    assert.ok(
        !deepEqual(
            [ function (x) { return x * 2 } ],
            [ function (x) { return x * 2 } ]
        ),
        'functions with the same .toString() aren\'t necess